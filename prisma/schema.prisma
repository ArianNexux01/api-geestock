// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "mysql"
  url      = "mysql://admin_geestock:geestockpassword@localhost:3306/geestock"
}

model Users {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  company        String
  position       String
  password       String
  isActive       Boolean          @default(true)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  LogsActivities LogsActivities[]
  warehouse      UsersWarehouse[]
  Role           Roles?           @relation(fields: [position], references: [id])

  @@map("users")
}

model Roles {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Users      Users[]

  @@map("roles")
}

model Warehouse {
  id          String  @id @default(uuid())
  name        String
  description String? @db.Text()

  country         String?
  province        String?
  address         String?
  code            String
  embarcationType String?
  flag            String?
  capacity        Int?
  type            String
  company         String?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  isActive        Boolean           @default(true)
  Requests        Requests[]        @relation("warehouseIncommingRequest")
  RequestsModel   Requests[]        @relation("warehouseOutcommingRequest")
  Alerts          Alerts[]
  Users           UsersWarehouse[]
  PiecesWarehouse PiecesWarehouse[]
  Orders          Orders[]

  @@map("warehouse")
}

model Pieces {
  id String @id @default(uuid())

  name          String
  partNumber    String
  description   String? @db.Text
  price         Float?  @default(0) @db.Float
  state         String
  brand_name    String?
  target        Int?    @default(0)
  min           Int?    @default(0)
  categoryId    String
  subCategoryId String
  supplierId    String?

  category        Categories?       @relation(fields: [categoryId], references: [id])
  subcategory     SubCategories?    @relation(fields: [subCategoryId], references: [id])
  supplier        Suppliers?        @relation(fields: [supplierId], references: [id])
  isActive        Boolean           @default(true)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  OrdersPiece     OrdersPiece[]
  PiecesWarehouse PiecesWarehouse[]

  @@unique([partNumber])
  @@map("pieces")
}

model PiecesWarehouse {
  id String @id @default(uuid())

  locationInWarehouse String           @default("No Description")
  quantity            Int              @default(0)
  warehouseId         String
  pieceId             String
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
  RequestsPieces      RequestsPieces[]
  Warehouse           Warehouse        @relation(fields: [warehouseId], references: [id], onUpdate: NoAction)
  Piece               Pieces           @relation(fields: [pieceId], references: [id], onUpdate: NoAction)
  Alerts              Alerts[]

  @@unique([pieceId, warehouseId])
  @@map("pieces_warehouse")
}

model Categories {
  id String @id @default(uuid())

  name          String
  code          String
  isActive      Boolean         @default(true)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  Pieces        Pieces[]
  SubCategories SubCategories[]

  @@map("category")
}

model SubCategories {
  id String @id @default(uuid())

  name       String
  code       String
  categoryId String

  category   Categories @relation(fields: [categoryId], references: [id])
  isActive   Boolean    @default(true)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Pieces     Pieces[]

  @@map("subcategory")
}

model Transports {
  id String @id @default(uuid())

  name String
  code String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("transports")
}

model Orders {
  id           String        @id @default(uuid())
  description  String
  number_order String        @default("0")
  imbl_awb     String
  reference    String        @default("00")
  state        String        @default("Em curso")
  isActive     Boolean       @default(true)
  requestId    String?
  warehouseId  String?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  OrdersPiece  OrdersPiece[]
  Request      Requests?     @relation(fields: [requestId], references: [id])
  Warehouse    Warehouse?    @relation(fields: [warehouseId], references: [id])

  @@map("order")
}

model OrdersPiece {
  pieceId       String
  Piece         Pieces   @relation(fields: [pieceId], references: [id])
  orderId       String
  Order         Orders   @relation(fields: [orderId], references: [id])
  quantity      Float
  quantityGiven Float?   @default(0)
  price         Float
  isActive      Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@id([pieceId, orderId])
}

model Suppliers {
  id       String  @id @default(uuid())
  name     String
  code     String
  isActive Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Pieces     Pieces[]

  @@map("supplier")
}

model Requests {
  id                    String           @id @default(uuid())
  name                  String           @default("None")
  warehouseIdIncomming  String?
  warehouseIdOutcomming String?
  state                 String
  numberPr              String           @default("0")
  created_at            DateTime         @default(now())
  updated_at            DateTime         @updatedAt
  isActive              Boolean          @default(true)
  warehouseIncomming    Warehouse?       @relation(name: "warehouseIncommingRequest", fields: [warehouseIdIncomming], references: [id])
  warehouseOutcomming   Warehouse?       @relation(name: "warehouseOutcommingRequest", fields: [warehouseIdOutcomming], references: [id])
  RequestsPieces        RequestsPieces[]
  Orders                Orders[]

  @@map("requests")
}

model RequestsPieces {
  id               String              @id @default(uuid())
  pieceWarehouseId String
  requestId        String
  request          Requests            @relation(fields: [requestId], references: [id], onUpdate: NoAction)
  quantity         Int
  quantityGiven    Int?
  created_at       DateTime            @default(now())
  updated_at       DateTime            @default(now()) @updatedAt
  InvoiceReciepmen InvoiceReciepment[]
  PiecesWarehouse  PiecesWarehouse?    @relation(fields: [pieceWarehouseId], references: [id], onUpdate: NoAction)
}

model InvoiceReciepment {
  id              String         @id @default(uuid())
  partNumber      String
  description     String
  number_series   String?
  quantity        Int            @default(0)
  requestPiecesId String
  RequestPieces   RequestsPieces @relation(fields: [requestPiecesId], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model LogsActivities {
  id String @id @default(uuid())

  userId String
  user   Users  @relation(fields: [userId], references: [id])

  description String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Alerts {
  id String @id @default(uuid())

  warehouseId      String
  pieceWarehouseId String

  warehouse      Warehouse       @relation(fields: [warehouseId], references: [id])
  pieceWarehouse PiecesWarehouse @relation(fields: [pieceWarehouseId], references: [id])

  description String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model UsersWarehouse {
  id String @default(uuid())

  Users       Users?     @relation(fields: [usersId], references: [id])
  usersId     String
  Warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@id([usersId, warehouseId])
}
